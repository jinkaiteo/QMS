# QMS System - Continuous Integration Pipeline
# Automated testing, security scanning, and quality checks

name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  POSTGRES_PASSWORD: postgres
  POSTGRES_DB: qms_test

jobs:
  # Code Quality and Security Scanning
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        
    - name: Install dependencies
      run: |
        cd backend
        pip install --upgrade pip
        pip install -r requirements.txt
        pip install bandit safety flake8 black isort mypy pytest-cov
        
    - name: Code formatting check (Black)
      run: |
        cd backend
        black --check --diff app/
        
    - name: Import sorting check (isort)
      run: |
        cd backend
        isort --check-only --diff app/
        
    - name: Linting (Flake8)
      run: |
        cd backend
        flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 app/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Type checking (MyPy)
      run: |
        cd backend
        mypy app/ --ignore-missing-imports
        
    - name: Security scanning (Bandit)
      run: |
        cd backend
        bandit -r app/ -f json -o bandit-report.json
        
    - name: Dependency vulnerability check (Safety)
      run: |
        cd backend
        safety check --json --output safety-report.json
        
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          backend/bandit-report.json
          backend/safety-report.json

  # Database and Integration Tests
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:18
        env:
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        
    - name: Install dependencies
      run: |
        cd backend
        pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov httpx
        
    - name: Set up test database
      run: |
        cd backend
        export ENVIRONMENT=testing
        export DATABASE_URL=postgresql://postgres:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}
        export REDIS_URL=redis://localhost:6379/0
        
        # Initialize database with test data
        python -c "
        from app.core.database import engine, Base
        from app.models import *
        Base.metadata.create_all(bind=engine)
        print('Test database initialized')
        "
        
    - name: Run unit tests
      run: |
        cd backend
        export ENVIRONMENT=testing
        export DATABASE_URL=postgresql://postgres:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}
        export REDIS_URL=redis://localhost:6379/0
        export SECRET_KEY=test-secret-key
        
        pytest tests/ -v --cov=app --cov-report=xml --cov-report=html --cov-fail-under=80
        
    - name: Upload test coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage
        
    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: backend/htmlcov/

  # API Integration Tests
  api-tests:
    name: API Integration Tests
    runs-on: ubuntu-latest
    needs: backend-tests
    
    services:
      postgres:
        image: postgres:18
        env:
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        cd backend
        pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio httpx
        
    - name: Start API server
      run: |
        cd backend
        export ENVIRONMENT=testing
        export DATABASE_URL=postgresql://postgres:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}
        export REDIS_URL=redis://localhost:6379/0
        export SECRET_KEY=test-secret-key
        
        # Initialize database
        python -c "
        from app.core.database import engine, Base
        from app.models import *
        Base.metadata.create_all(bind=engine)
        "
        
        # Start server in background
        uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        sleep 10
        
    - name: Run API tests
      run: |
        cd backend
        export API_BASE_URL=http://localhost:8000
        pytest tests/api/ -v --tb=short
        
    - name: Test API documentation
      run: |
        curl -f http://localhost:8000/api/v1/docs || exit 1
        curl -f http://localhost:8000/health || exit 1

  # Compliance and Audit Tests
  compliance-tests:
    name: Compliance & Audit Tests
    runs-on: ubuntu-latest
    needs: backend-tests
    
    services:
      postgres:
        image: postgres:18
        env:
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        cd backend
        pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest
        
    - name: Test audit trail functionality
      run: |
        cd backend
        export ENVIRONMENT=testing
        export DATABASE_URL=postgresql://postgres:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}
        export SECRET_KEY=test-secret-key
        
        # Test 21 CFR Part 11 compliance
        pytest tests/compliance/ -v -k "test_audit_trail or test_data_integrity"
        
    - name: Test security controls
      run: |
        cd backend
        pytest tests/security/ -v -k "test_authentication or test_authorization"
        
    - name: Generate compliance report
      run: |
        cd backend
        python scripts/generate_compliance_report.py --output compliance-report.json
        
    - name: Upload compliance report
      uses: actions/upload-artifact@v3
      with:
        name: compliance-report
        path: backend/compliance-report.json

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    services:
      postgres:
        image: postgres:18
        env:
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        cd backend
        pip install --upgrade pip
        pip install -r requirements.txt
        pip install locust
        
    - name: Start API server
      run: |
        cd backend
        export ENVIRONMENT=testing
        export DATABASE_URL=postgresql://postgres:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}
        export REDIS_URL=redis://localhost:6379/0
        export SECRET_KEY=test-secret-key
        
        # Initialize database
        python -c "
        from app.core.database import engine, Base
        from app.models import *
        Base.metadata.create_all(bind=engine)
        "
        
        uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        sleep 10
        
    - name: Run performance tests
      run: |
        cd backend
        locust -f tests/performance/locustfile.py --host=http://localhost:8000 --users 50 --spawn-rate 5 --run-time 2m --html performance-report.html --headless
        
    - name: Upload performance report
      uses: actions/upload-artifact@v3
      with:
        name: performance-report
        path: backend/performance-report.html

  # Build and Package
  build:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: [code-quality, backend-tests, api-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: false
        tags: qms-backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Test Docker image
      run: |
        docker run --rm qms-backend:${{ github.sha }} python -c "from app.main import app; print('✅ Application imports successfully')"

  # Notification
  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [code-quality, backend-tests, api-tests, compliance-tests, build]
    if: always()
    
    steps:
    - name: Notify success
      if: ${{ needs.code-quality.result == 'success' && needs.backend-tests.result == 'success' && needs.api-tests.result == 'success' }}
      run: |
        echo "✅ CI Pipeline completed successfully!"
        echo "All tests passed and quality checks completed."
        
    - name: Notify failure
      if: ${{ needs.code-quality.result == 'failure' || needs.backend-tests.result == 'failure' || needs.api-tests.result == 'failure' }}
      run: |
        echo "❌ CI Pipeline failed!"
        echo "Please check the logs and fix the issues."
        exit 1