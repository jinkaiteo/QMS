name: QMS Platform CI/CD Pipeline

on:
  push:
    branches: [ main, develop, release/* ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - development
        - staging
        - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: qms-backend
  IMAGE_NAME_FRONTEND: qms-frontend
  PYTHON_VERSION: '3.8'
  NODE_VERSION: '18'

jobs:
  # ===========================
  # Code Quality and Security
  # ===========================
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    outputs:
      backend-changed: ${{ steps.changes.outputs.backend }}
      frontend-changed: ${{ steps.changes.outputs.frontend }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Detect changes
      uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          backend:
            - 'backend/**'
            - 'requirements.txt'
            - 'Dockerfile*'
          frontend:
            - 'frontend/**'
            - 'package*.json'
            - 'vite.config.ts'

    - name: Setup Python
      if: steps.changes.outputs.backend == 'true'
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Python dependencies
      if: steps.changes.outputs.backend == 'true'
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install black isort flake8 mypy pytest bandit safety

    - name: Python code formatting (Black)
      if: steps.changes.outputs.backend == 'true'
      run: |
        cd backend
        black --check --diff .

    - name: Python import sorting (isort)
      if: steps.changes.outputs.backend == 'true'
      run: |
        cd backend
        isort --check-only --diff .

    - name: Python linting (Flake8)
      if: steps.changes.outputs.backend == 'true'
      run: |
        cd backend
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Python type checking (MyPy)
      if: steps.changes.outputs.backend == 'true'
      run: |
        cd backend
        mypy app --ignore-missing-imports

    - name: Python security scanning (Bandit)
      if: steps.changes.outputs.backend == 'true'
      run: |
        cd backend
        bandit -r app -f json -o bandit-report.json || true

    - name: Python dependency security (Safety)
      if: steps.changes.outputs.backend == 'true'
      run: |
        cd backend
        safety check --json --output safety-report.json || true

    - name: Setup Node.js
      if: steps.changes.outputs.frontend == 'true'
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      if: steps.changes.outputs.frontend == 'true'
      run: |
        cd frontend
        npm ci

    - name: Frontend linting (ESLint)
      if: steps.changes.outputs.frontend == 'true'
      run: |
        cd frontend
        npm run lint

    - name: Frontend type checking (TypeScript)
      if: steps.changes.outputs.frontend == 'true'
      run: |
        cd frontend
        npm run type-check

    - name: Frontend security audit
      if: steps.changes.outputs.frontend == 'true'
      run: |
        cd frontend
        npm audit --audit-level=high

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          backend/bandit-report.json
          backend/safety-report.json
        retention-days: 30

  # ===========================
  # Backend Testing
  # ===========================
  backend-tests:
    name: Backend Testing
    runs-on: ubuntu-latest
    needs: code-quality
    if: needs.code-quality.outputs.backend-changed == 'true'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: qms_test
          POSTGRES_USER: qms_test
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio httpx

    - name: Run unit tests
      env:
        ENVIRONMENT: testing
        DATABASE_URL: postgresql://qms_test:test_password@localhost:5432/qms_test
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key-for-ci
        JWT_SECRET_KEY: test-jwt-secret-for-ci
      run: |
        cd backend
        pytest tests/ -v --cov=app --cov-report=xml --cov-report=html

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: backend/coverage.xml
        flags: backend
        name: backend-coverage

    - name: Store test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: backend-test-results
        path: |
          backend/coverage.xml
          backend/htmlcov/
        retention-days: 30

  # ===========================
  # Frontend Testing
  # ===========================
  frontend-tests:
    name: Frontend Testing
    runs-on: ubuntu-latest
    needs: code-quality
    if: needs.code-quality.outputs.frontend-changed == 'true'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: |
        cd frontend
        npm ci

    - name: Run unit tests
      run: |
        cd frontend
        npm run test:coverage

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

    - name: Store test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: frontend-test-results
        path: |
          frontend/coverage/
        retention-days: 30

  # ===========================
  # Build and Package
  # ===========================
  build-backend:
    name: Build Backend
    runs-on: ubuntu-latest
    needs: [code-quality, backend-tests]
    if: always() && (needs.code-quality.outputs.backend-changed == 'true')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME_BACKEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    needs: [code-quality, frontend-tests]
    if: always() && (needs.code-quality.outputs.frontend-changed == 'true')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: |
        cd frontend
        npm ci

    - name: Build frontend
      run: |
        cd frontend
        npm run build

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME_FRONTEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  # ===========================
  # Integration Testing
  # ===========================
  integration-tests:
    name: Integration Testing
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend]
    if: always() && (needs.build-backend.result == 'success' || needs.build-frontend.result == 'success')

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: qms_integration
          POSTGRES_USER: qms_user
          POSTGRES_PASSWORD: integration_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install test dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-asyncio httpx requests

    - name: Run integration tests
      env:
        ENVIRONMENT: testing
        DATABASE_URL: postgresql://qms_user:integration_password@localhost:5432/qms_integration
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: integration-test-secret
        JWT_SECRET_KEY: integration-test-jwt-secret
      run: |
        python backend/tests/integration/integration_test_runner.py

    - name: Store integration test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-results
        path: |
          integration-test-results.json
        retention-days: 30

  # ===========================
  # Security Scanning
  # ===========================
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend]
    if: always()

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner (Backend)
      if: needs.build-backend.result == 'success'
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME_BACKEND }}:${{ github.sha }}
        format: 'sarif'
        output: 'backend-trivy-results.sarif'

    - name: Run Trivy vulnerability scanner (Frontend)
      if: needs.build-frontend.result == 'success'
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME_FRONTEND }}:${{ github.sha }}
        format: 'sarif'
        output: 'frontend-trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: '.'

  # ===========================
  # Deployment
  # ===========================
  deploy-development:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [integration-tests, security-scan]
    if: github.ref == 'refs/heads/develop' && needs.integration-tests.result == 'success'
    environment: development

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to Development Environment
      run: |
        echo "Deploying to Development..."
        # Add actual deployment steps here
        # This could include updating Kubernetes manifests, Helm charts, etc.

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [integration-tests, security-scan]
    if: github.ref == 'refs/heads/main' && needs.integration-tests.result == 'success'
    environment: staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to Staging Environment
      run: |
        echo "Deploying to Staging..."
        # Add actual deployment steps here

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [integration-tests, security-scan]
    if: startsWith(github.ref, 'refs/tags/v') && needs.integration-tests.result == 'success'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to Production Environment
      run: |
        echo "Deploying to Production..."
        # Add actual deployment steps here

  # ===========================
  # Notification and Reporting
  # ===========================
  notify:
    name: Notify and Report
    runs-on: ubuntu-latest
    needs: [deploy-development, deploy-staging, deploy-production]
    if: always()

    steps:
    - name: Notify Teams on Success
      if: success()
      run: |
        echo "Pipeline completed successfully!"
        # Add notification logic (Slack, Teams, etc.)

    - name: Notify Teams on Failure
      if: failure()
      run: |
        echo "Pipeline failed!"
        # Add failure notification logic